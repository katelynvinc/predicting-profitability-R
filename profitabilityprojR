# Look at the data, call caret package and normalization package
str(existingdata)
summary(existingdata)
library(caret)
library(BBmisc)
library(kernlab)
library(openxlsx)
options(max.print=10000)

# Get rid of problematic variables (best sellers rank) and unneccessary variables
existingdata$BestSellersRank <- NULL
existingdata$ProductNum <- NULL

# Detect and delete outliers in volume
outliers <- boxplot((existingdata$Volume))$out
outliers
existingdata<-existingdata[-which(existingdata$Volume %in% outliers),]

# Dummify the data and view new dataset
newDataFrame <- dummyVars("~.",data = existingdata)
readyData <- data.frame(predict(newDataFrame,newdata = existingdata))
View(readyData)
str(readyData)

# See correlation
corrData <- cor(readyData)
corrData
View(corrData)

# Create heatmap
library(corrplot)
corrplot(corrData)

# Get rid of variables with high correlation (5 star, 3 star, 2 star)
readyData$x5StarReviews <- NULL
readyData$x2StarReviews <- NULL

# Model 1 (Linear Model)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
model1 <- lm(Volume~., data = training,preProc = c("center", "scale"), importance = TRUE)
print(model1)
summary(model1)
# PREDICTIONS ON TEST DATA
testpreds1 <- predict(model1,testing)
postResample(testpreds1,testing$Volume)
print(testpreds1)
summary(testpreds1)

# Model 2 (Automatic Grid, Random Forest)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
model2 <- train(Volume~., data = training, method = "rf", trControl=fitControl, preProc = c("center", "scale"), importance = TRUE)
print(model2)
summary(model2)
# PREDICTIONS ON TEST DATA
testpreds2 <- predict(model2,testing)
postResample(testpreds2,testing$Volume)
print(testpreds2)
summary(testpreds2)

# Model 3 (Manual Grid, Random Forest, Mtry = 1,2,3,4,6,8,10)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
rfGrid <- expand.grid(mtry=c(1,2,4,6,8,10))
system.time(model3 <- train(Volume~., data = training, method = "rf", trControl=fitControl, tuneGrid=rfGrid, preProc = c("center", "scale"), importance = TRUE))
print(model3)
summary(model3)
# PREDICTIONS ON TEST DATA
testpreds3 <- predict(model3,testing)
postResample(testpreds3,testing$Volume)
print(testpreds3)
summary(testpreds3)

# Model 4 (Manual Grid, Random Forest, Mtry = 12,14,16,18,20)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
rfGrid <- expand.grid(mtry=c(12,14,16,18,20))
system.time(model4 <- train(Volume~., data = training, method = "rf", trControl=fitControl, tuneGrid=rfGrid, preProc = c("center", "scale"), importance = TRUE))
print(model4)
summary(model4)
# PREDICTIONS ON TEST DATA
testpreds4 <- predict(model4,testing)
postResample(testpreds4,testing$Volume)
print(testpreds4)
summary(testpreds4)

# Model 5 (Manual Grid, Random Forest, Mtry = 22,24,26,28,30)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
rfGrid <- expand.grid(mtry=c(22,24,26,28,30))
system.time(model5 <- train(Volume~., data = training, method = "rf", trControl=fitControl, tuneGrid=rfGrid, preProc = c("center", "scale"), importance = TRUE))
print(model5)
summary(model5)
# PREDICTIONS ON TEST DATA
testpreds5 <- predict(model5,testing)
postResample(testpreds5,testing$Volume)
print(testpreds5)
summary(testpreds5)

# Model 6 (Manual Grid, Random Forest, Mtry = 32,34,36,38,40)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
rfGrid <- expand.grid(mtry=c(32,34,36,38,40))
system.time(model6 <- train(Volume~., data = training, method = "rf", trControl=fitControl, tuneGrid=rfGrid, preProc = c("center", "scale"), importance = TRUE))
print(model6)
summary(model6)
# PREDICTIONS ON TEST DATA
testpreds6 <- predict(model6,testing)
postResample(testpreds6,testing$Volume)
print(testpreds6)
summary(testpreds6)

# Model 7 (Manual Grid, Random Forest, Mtry = 1:10)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
rfGrid <- expand.grid(mtry=c(1:10))
system.time(model7 <- train(Volume~., data = training, method = "rf", trControl=fitControl, tuneGrid=rfGrid, preProc = c("center", "scale"), importance = TRUE))
print(model7)
summary(model7)
# PREDICTIONS ON TEST DATA
testpreds7 <- predict(model7,testing)
postResample(testpreds7,testing$Volume)
print(testpreds7)
summary(testpreds7)

# Model 8 (Random Search, Random Forest)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1, search = 'random')
model8 <- train(Volume~., data = training, method = "rf", trControl=rfitControl,preProc = c("center", "scale"), importance = TRUE)
print(model8)
summary(model8)
# PREDICTIONS ON TEST DATA
testpreds8 <- predict(model8,testing)
postResample(testpreds8,testing$Volume)
print(testpreds8)
summary(testpreds8)

# Model 9 (svmLinear, tunelength = 10)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1, search = 'random')
model9 <- train(Volume~., data = training, method = "svmLinear", trControl=rfitControl, preProc = c("center", "scale"), tuneLength = 10, importance = TRUE)
print(model9)
summary(model9)
# PREDICTIONS ON TEST DATA
testpreds9 <- predict(model9,testing)
postResample(testpreds9,testing$Volume)
print(testpreds9)
summary(testpreds9)

# Model 10 (svmRadial, tunelength = 10)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1, search = 'random')
model10 <- train(Volume~., data = training, method = "svmRadial", trControl=rfitControl, preProc = c("center", "scale"), tuneLength = 10, importance = TRUE)
print(model10)
summary(model10)
# PREDICTIONS ON TEST DATA
testpreds10 <- predict(model10,testing)
postResample(testpreds10,testing$Volume)
print(testpreds10)
summary(testpreds10)

# Model 11 (gbm, gradient)
set.seed(123)
inTraining <- createDataPartition(readyData$Volume, p = .70, list = FALSE)
training <- readyData[inTraining,]
testing <- readyData[-inTraining,]
caretGrid <- expand.grid(interaction.depth=c(1, 3, 5), n.trees = (0:50)*50,
                         shrinkage=c(0.01, 0.001, .1),
                         n.minobsinnode=10)
rfitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1, search = 'random')
model11 <- train(Volume~., data=training, distribution="gaussian", method="gbm",
                 trControl=rfitControl, verbose=FALSE,  tuneGrid=caretGrid, bag.fraction=0.75, preProc = c("center", "scale"))   
print(model11)
summary(model11)
# PREDICTIONS ON TEST DATA
testpreds11 <- predict(model11,testing)
postResample(testpreds11,testing$Volume)
print(testpreds11)
summary(testpreds11)

# NEW DATA
# Get rid of problematic variables (best sellers rank) and unneccessary variables
newproductdata$BestSellersRank <- NULL
newproductdata$ShippingWeight <- NULL
newproductdata$ProductDepth <- NULL
newproductdata$ProductWidth <- NULL
newproductdata$ProductHeight <- NULL
newproductdata$ProductNum <- NULL

# Dummify the data and view new dataset
newDataFrame2 <- dummyVars("~.",data = newproductdata)
readyData2 <- data.frame(predict(newDataFrame2, newdata = newproductdata))
View(readyData2)
str(readyData2)

# Get rid of variables with high correlation (5 star, 3 star, 2 star)
readyData2$x5StarReviews <- NULL
readyData2$x2StarReviews <- NULL

# Select best model

# PREDICTIONS ON NEW DATA
finalPred <- predict(model5,readyData2)
print(finalPred)
summary(finalPred)
# Print predictions on new dataset
output <- newproductdata
output$predictions <- finalPred
write.csv(output, file="C2.T3output.csv", row.names = TRUE)
# VARIABLE IMPORTANCE
# call mlbench
library(mlbench)
# estimate variable importance using model
importancemodel5 <- varImp(model5, scale=FALSE)
plot(importancemodel5, main="Variable Importance with MARS")
# summarize importance
print(importancemodel5)
# plot importance
plot(importancemodel5)
